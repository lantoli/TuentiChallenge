Tuenti:

1 - BITCOM

In the near future, after winning the Tuenti Challenge, you acquire almost supernatural programming skills. You write a Flux Capacitor Algorithm that is able to predict the exchange rate in euros of Bitcoin (the most used Internet currency) for a period of time. Now, you need to write a program that, given a list of Bitcoin exchange rates for a period of time and your initial budget, calculates the maximum number of euros that you are going to have at the end of the period. That is, the amount of euros you can earn plus your initial budget.

The exchange rate is always an integer, you can't buy a fraction of a bitcoin and you can sell or buy bitcoins at any moment, as many times as you want.

Input

First line contains the number of test cases, T, and T cases follow (each one in a different line). Each test case consists of one integer N (1 ≤ N ≤ 100), indicating your initial budget in euros. In the next line, there is a list of integers indicating the future value of Bitcoin at different times in a fixed period.

Output

The maximum amount of euros that you will have at the end, in a different line for each test case.

Example

Initial budget: 3
List of exchange rates: 1, 2, 10, 6
You buy at 1 euro per bitcoin and sell at 10 euros per bitcoin, so at the end you will have 30 euros.

Sample input

2
2
1 2 10 4 1 10
5
1 2 4 20 5 30 4 25 7

Sample output

200
3750


2 - DID YOU MEAN

You work in a company that's main product is a search engine. You have noticed that users make a lot of mistakes while typing :) And that the most common mistake is that they type a very similar word instead of the one they are looking for. So what you have decided is to make suggestions to the users while they are typing. You want to suggest valid words from the dictionary that contain the same letters (and the same number of each letter) but in different orders.

For example, a user types "act", you might want to suggest "cat". In the same way, if user types "elvis", your suggestion should be "lives".

Your goal is to find all possible suggestions for a set of words and a given dictionary. Assume that all the words in the dictionary are correct.

Input

The input consists of comments (lines starting with '#'), name of the dictionary file to use, number of words that require suggestions and the list of words that require suggestions. Comments describe and separate each part of the intput:

#Dictionary file
name of the file containting the dictionary
#Suggestion numbers
Integer N, representing the number of words provided, one per line, that require suggestions
#Find the suggestions
List of words for which you need to find the suggestions, each one in a different line
The dictionary file is nothing else than a list of words.
Output

The output must be a list of

word -> suggestion1 suggestion2 ...
each one on a different line. The suggestions for each word, if more than one, need to be in alphabetical order.

If no suggestion for a word can be found, then output

word ->
for that word.

Sample input

#Dictionary file
dictionary
#Suggestion numbers
3
#Find the suggestions
elvis
lactoprotein
nosuggestion
Sample output

elvis -> lives velis
lactoprotein -> protectional
nosuggestion ->
Sample dictionary

gainly
laying
protectional
lactoprotein
elvis
lives
velis
nosuggestion
The dictionaries can be found here and you will need to unzip it in the folder where you run your program.

3 - LOST IN LOST  (FALTA ENUNCIADO)

4 - NUMBERS (FALTA ENUNCIADO)

5 - DUNGEON QUEST

You have been hired to implement a simple AI for a new action RPG game. The game designers have given you the following specfications:

The scenario of the game consists of a grid of N x M cells and your character can move forward, right or left but never go back to the previous cell (like the classic cell phone game, Snake). Your character moves at the speed of 1 cell per second. Once you beat the stage several gems appear on random cells in the scenario and disappear after Z seconds. There are 3 different types of gems with values of 1, 2 and 5. Your task is to implement an algorithm to find a path that maximizes the total value of gems collected in the Z seconds they remain visible.

For example, given the following 5 x 5 grid where the numbers indicate the value of the gems in the cells and the character x is the current position of your character:

2 - 2 - 2 - 0 - 0  
|   |   |   |   | 
0 - 2 - 2 - 0 - 0
|   |   |   |   |
0 - 0 - x - 5 - 0
|   |   |   |   |
0 - 0 - 0 - 5 - 0
|   |   |   |   |
0 - 0 - 0 - 0 - 0
A possible solution for a given time of 6 seconds would be:

2 - 2 - 2 - 0 - 0    2 - 2 - 2 - 0 - 0    2 - 2 - 2 - 0 - 0 
|   |   |   |   |    |   |   |   |   |    |   |   |   |   |
0 - 2 - 2 - 0 - 0    0 - 2 - 2 - 0 - 0    0 - 2 - 2 - 0 - 0
|   |   |   |   |    |   |   |   |   |    |   |   |   |   |
0 - 0 - 0 - x - 0 => 0 - 0 - 0 - 0 - 0 => 0 - 0 - 0 - 0 - 0 
|   |   |   |   |    |   |   |   |   |    |   |   |   |   |
0 - 0 - 0 - 5 - 0    0 - 0 - 0 - x - 0    0 - 0 - x - 0 - 0
|   |   |   |   |    |   |   |   |   |    |   |   |   |   |
0 - 0 - 0 - 0 - 0    0 - 0 - 0 - 0 - 0    0 - 0 - 0 - 0 - 0

2 - 2 - 2 - 0 - 0    2 - 2 - 2 - 0 - 0    2 - 2 - x - 0 - 0 
|   |   |   |   |    |   |   |   |   |    |   |   |   |   |
0 - 2 - 2 - 0 - 0    0 - 2 - x - 0 - 0    0 - 2 - 0 - 0 - 0
|   |   |   |   |    |   |   |   |   |    |   |   |   |   |
0 - 0 - x - 0 - 0 => 0 - 0 - 0 - 0 - 0 => 0 - 0 - 0 - 0 - 0
|   |   |   |   |    |   |   |   |   |    |   |   |   |   |
0 - 0 - 0 - 0 - 0    0 - 0 - 0 - 0 - 0    0 - 0 - 0 - 0 - 0
|   |   |   |   |    |   |   |   |   |    |   |   |   |   |
0 - 0 - 0 - 0 - 0    0 - 0 - 0 - 0 - 0    0 - 0 - 0 - 0 - 0
With a final result of 14 in gem value

Input

The first line of the input is the number of test cases that follows. Each problem has 5 lines:

M, N: width and height of the grid.
X, Y: initial position on the grid.
Z: number of seconds until the gems disappear.
G: number of gems in the grid.
i0,j0,k0#i1,j1,k1#...#iT-1,kT-1,jT-1: iT, jT are the coordinates of the Tth gem in the grid and kT is the value of the Tth gem.
Output:

The value of the gems collected for each test case, each one in a different line.

Sample input:

2
5,5
2,2
6
7
0,0,2#1,0,2#2,0,2#1,1,2#1,2,2#3,2,5#3,3,5
4,4
2,2
5
7
1,0,5#1,1,1#2,1,2#1,2,1#3,2,2#2,3,5#3,3,2
Sample output:

14
12
Limits:

3 ≤ M ≤ 100
3 ≤ N ≤ 100
2 ≤ Z ≤ 20

6 - ICE CAVE

You are trapped inside a dark cave. You are freezing, and you realize that you won't last much longer if you don't escape. The cave's floor is covered in ice, so if you try to move, you will slide until something (a rock, a wall...) stops you. You need to find a way out of the cave if you want to survive, and you want to figure out how long it will take you.

Input

The first line of the input is an integer, N. N test cases follow. For each test case, you will be given the width and length W and H (in meters) of the cave, the speed S (in m/s) that you will have while sliding, and the time T (in seconds) that you will need to make yourself move after you stop. Those values are contained in a single line, separated by whitespaces. You will also have a rudimentary map of that cave.

Output

For each test case, output the time in seconds (rounded, half a second won't make any difference in your survival options) that you will need to escape the cave.

Note: You can only move up, down, right or left, not diagonally. And while you are sliding, you have absolutely no control so you can't turn or stop.

Map legend

· Ice
# Obstacle (wall, rock, whatever)
X Your starting position
O (Uppercase "o") Exit
The exit is always on the border of the cave, and will allways be reachable.

Example test case

4 5 1 3
####
#X·#
#··#
#··O
####
Here, the map dimensions are 4x5, you slide at 1m/s, and you have to spend 3 seconds to start sliding after you stop (or before you start).

Sample input

2
4 5 1 3
####
#X·#
#··#
#··O
####
6 8 1 1
######
#X#··#
#····#
#····#
##···#
#··###
#····O
######
Sample output

10
19
PS: Yes, we've played Pokemon Gold/Silver. Deal with it.

7 - BOOZZLE

Bob is really bad at Boozzle. He gets really angry when he loses against his friends and he has decided to do whatever it takes to win. He will pay a fortune for a machine that plays optimally.

Boozzle is played as follows. You are given a board of n rows and m columns. For each cell, there is a character, a score, and a score modifier. The goal is to find words in the board and achieve the maximum score possible in the given time. Words are built by joining adjacent cells in any direction (vertically, horizontally or diagonally).

The score for a word is given by

(S(c1)*CM(c1) + ... S(cn)*CM(cj)) * max(WM(c1),...,WM(cj)) + j
where

c1,...,cj is the path of cells that make up the word
S(ci) is the score for the character of the cell i
CM(ci) is the multiplier modifier for the score of the character (WM(ci)>1 => CM(ci)=1)
WM(ci) is the multiplier modifier for the whole word (CM(ci)>1 => WM(ci)=1)
To help Bob, you have to develop an algorithm to control a robot that will play Boozzle optimally, taking into account the following:

The interface with which the robot interacts is a touchscreen, so it has to select the words by using its "fingers", exactly like a human would.
Because of that, it takes time to submit a word. Specifically, it takes 1 second to select each of the cells that make up a word, plus 1 second more to press the "submit" button.
There is no extra delays between different words. (ie, it takes 11 seconds to submit two words of 4 and 5 characters, respectively)
The same word cannot be submitted twice, even if there are different paths for the same word.
All the cells building a word must be different (i.e., you cannot use the same cell twice for the same word).
The only valid words are the ones in this dictionary.
Time spent computing the best words is not taken into account.
Input and limits

First line of the input contains the number of problems, N 
1 ≤ N ≤ 10
Scores for each caracter follow 
{'A': 1, 'C': 3, 'B': 3, 'E': 1, 'D': 2, 'G': 2, 'F': 4, 'I': 1, 'H': 4, 'K': 5, 'J': 8, 'M': 3, 'L': 1, 'O': 1, 'N': 1, 'Q': 5, 'P': 3, 'S': 1, 'R': 1, 'U': 1, 'T': 1, 'W': 4, 'V`: 4, 'Y': 4, 'X': 8, 'Z': 10}
Next, the duration of the game in seconds, W 
1 ≤ W ≤ 300
Next, the number of rows, n 
1 ≤ n ≤ 50
Next, the number of columns, m 
1 ≤ m ≤ 50
And finally, the board: n rows with m cells. Each cell is represented by Wxy where W represents the character, x is the multiplier type (1 => CM multiplier, 2 => WM multiplier), and y is the multiplier value (1 ≤ y ≤ 3)
Output

For each problem a line with the maximum score the robot could achieve.
Sample input

2
{'A': 1, 'C': 3, 'B': 3, 'E': 1, 'D': 2, 'G': 2, 'F': 4, 'I': 1, 'H': 4, 'K': 5, 'J': 8, 'M': 3, 'L': 1, 'O': 1, 'N': 1, 'Q': 5, 'P': 3, 'S': 1, 'R': 1, 'U': 1, 'T': 1, 'W': 4, 'V': 4, 'Y': 4, 'X': 8, 'Z': 10}
9
2
2
B11 B11
I11 P11
{'A': 1, 'C': 3, 'B': 3, 'E': 1, 'D': 2, 'G': 2, 'F': 4, 'I': 1, 'H': 4, 'K': 5, 'J': 8, 'M': 3, 'L': 1, 'O': 1, 'N': 1, 'Q': 5, 'P': 3, 'S': 1, 'R': 1, 'U': 1, 'T': 1, 'W': 4, 'V': 4, 'Y': 4, 'X': 8, 'Z': 10}
10
2
2
B11 B11
I11 P11
Sample output

16
22

8 - Tuenti Timing Auth

Sometimes we need to protect highly secret data and use good sources of entropy, like the weather, to seed our PRNGs. Sometimes we don't. What did we do this time?

Get the key to your key. Go.

<?

function get_unique($k) {
  $r = unpack('v*', fread(fopen('/dev/urandom', 'r'),16));
  $uuid = sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
    $r[1], $r[2], $r[3], $r[4] & 0x0fff | 0x4000,
    $r[5] & 0x3fff | 0x8000, $r[6], $r[7], $r[8]);
  return $uuid;
}

$keys = json_decode(file_get_contents("../data/keys.json"), true);

if (isset($_POST["key"]) && isset($_POST["pass"])) {
  $passwd = get_unique($_POST["key"]);
  sleep(5); // no bf this time!

  if (strcmp($passwd, $_POST["pass"]) == 0) {
    echo "welcome master";
    echo "your key: " . $keys[$_POST["key"]];
  } else {
    echo "impostor, only the chosen may pass.";
  }
} else {
  echo "<html><head><title>keyz</title></head><body><form method='POST'>key<input type='text' name='key'><br/>pass<input type='text' name='pass'><br/><input type='submit'>";
  
Challenge 9 - Defenders of the Galaxy
The galaxy is infested with colonies of nasty creatures, called the Zorg. Their only goal is to conquer and destroy every other form of intelligent life. They arrived on our home planet a few hours ago, and their numbers are counted in the millions. If they reach the capital city, all hope will be lost.

The Zorg battle strategy is basically to overrun their enemies with thousands and thousands of their minions, the Zorglings. They are weak creatures, like big cockroaches, but they are fast (1 m/s, according to our observations). Inside each one of them is a powerful, short-ranged bio-explosive, triggered by their mind, effectively converting them into moving grenades. Fortunately, to reach the walls of the great city of Azundys, they have to pass through a narrow canyon of W meters wide (allowing only W Zorglings to enter the canyon per second) and H meters long, heavily defended by our allies, the Protass, standing at the end of the canyon.

The Protass soldiers have laser guns. Each gun can fire once per second. Laser impact is fatal for the Zorglings, and the elite soldiers never miss a shot (this means that with 10 soldiers we can kill 10 Zorglings per second). Each soldier's equipment and training cost S gold. As soon as the Zorlings appear in the canyon entrance, they will be in range, so the soldiers can shoot them.

We also have a special weapon: the Crematorium. Its energy and fuel consumption are insane, but it will burn all the Zorglings present to ashes in the canyon at a given time. Each time the Crematorium is used, it costs C gold.

If a single Zorgling reaches the end of the canyon, it will blow up, destroying the last city defenses, and thus dooming the last standing free planet in this quadrant of the galaxy.

Given that you have G gold, and all the data that was presented above, you must output how long you will survive the attack, in seconds, with the most optimal configuration (how much you will spend in soldiers and how much in Crematoriums). You must assume that the Zorg army will be infinite, and they will try to enter the canyon continuously, with as many of them as they can.

Input

Integer T: Number of test cases.
T tests cases follow. For each test case, in a single line, whitespace-separated:
Integer W: width of the canyon, in meters
Integer H: length of the canyon, in meters
Integer S: price to train a soldier, in pieces of gold
Integer C: price to trigger a Crematorium, in pieces of gold
Integer G: amount of gold that you have
Output

For each test case, the number of seconds you can resist. If you think you can take on the Zorg overrun forever, output "-1" (without the quotes).

Example

Suppose there is a canyon of dimensions 3x2. You have 2 soldiers and 1 Crematorium. The battle will unfold as follows (Zorglings are represented by a "v", the canyon walls with a "#", and the city walls with a "-"):

#···#
#···#
#---#
Everything is ready. t=0s

#vvv#
#···#
#---#
Zorglings appear. t=1s

#··v#
#···#
#---#
The 2 soldiers instantly kill 2 Zorglings. t=1s

#vvv#
#··v#
#---#
More Zorglings appear. t=2s

#·vv#
#···#
#---#
The soldiers kill another 2 Zorglings. t=2s

#vvv#
#·vv#
#---#
More Zorglings appear. t=3s

#vvv#
#···#
#---#
The soldiers kill another 2 Zorglings. t=3s

#vvv#
#vvv#
#---#
More Zorglings appear. t=4s

#vvv#
#··v#
#---#
The soldiers kill another 2 Zorglings. t=4s

#···#
#···#
#---#
We have to use the Crematorium right now, killing every single Zorgling in the cannon. t=4s

#vvv#
#···#
#---#
Zorglings appear. t=5s

#··v#
#···#
#---#
The 2 soldiers instantly kill 2 Zorglings. t=5s

#vvv#
#··v#
#---#
More Zorglings appear. t=6s

#·vv#
#···#
#---#
The soldiers kill another 2 Zorglings. t=6s

#vvv#
#·vv#
#---#
More Zorglings appear. t=7s

#vvv#
#···#
#---#
The soldiers kill another 2 Zorglings. t=7s

#vvv#
#vvv#
#---#
More Zorglings appear. t=8s

#vvv#
#··v#
#---#
The soldiers kill another 2 Zorglings. t=8s

In t=9, one Zorgling reaches the walls, destroying the defenses. So, in this case, the output you should give is 8 seconds.

Sample input

2
10 20 50 100 400
10 20 50 100 500
Sample output

100
-1  

Challenge 10 - The Checking Machine
Give the correct answer.

Input

One test case per line.
Output

Output the solution for each test case in a separate line.
Sample input

a2[b3[c]]
10[abc]
Sample output

c53115f92f2cbee6cb25be4a42f03fba
1b66558be2b2cd898ebc3383623a3677


Challenge 11 - The escape from Pixel Island
As a NASA engineer, assigned to the Landsat Data Continuity Mission, you have been informed that the satellite images from the Scabb Island present weird patterns and possible something hidden in them. The following information was sent to your department yesterday:

Hi dear fellow,

In my research about salmon fishing in the Yemen and Caribbean Islands I recently found something quite remarkable in the supposedly uninhabited Scabb Island. I can see moving pixels from the satellite images received every 12 hours. I attach a drawing of the first one I found.

I managed to create a program that reads the satellite images and convert them into a format that you may be able to analyze with your resources and expertise.

My intuition tells me that you need to add up the weird black squares and look for a pattern. Good Luck!
As the letter said, you need to write a program that adds up the squares and finds the hidden message.


Input

First line contains the number of test cases, T, and T cases follow (each one in a different line). Each test case consists of several strings separated by whitespaces. Each string contains only the characters p, w and b (see image above) and represents one pattern of squares.

Output

For each test case, output the secret message (on a different line).


Challenge 12 - Whispering paRTTY
We like to whisper small little secrets here around the office. In order to do so, we use a nice protocol that we didn't invent (you know, we don't like to reinvent the wheel). Can you read what we say?

Psst... somehow one engineer left a message coder open to the world at partty.contest.tuenti.net:1414



Challenge 13 - Sparse randomness
Randall has recently enrolled in a cryptography course, where he's learning about encryption, security and randomness. In order to fully complete the course, he has to submit a project about any topic taught during the course, and due to his fascination with randomness and pseudo random number generators (PRNG) he decided to focus his project on it.

One of the ideas he has in mind for the project is to build his own simple PRNG, which will work in the following way: it will be initialized with a random seed which will also be used as the first number that the PRNG outputs. When generating the next one, it might happen that be a number greater than or equal to the previous one, depending on an internal algorithm.

In order to test the degree of randomness achieved by his PRNG, Randall has decided to generate a sequence of numbers with it and then measure the maximum number of repetitions found in some given subsequences.

Can you help Randall to calculate this metric?


Input

The input file starts with a single line containing the number of test cases, T. Each test case begins with 2 numbers in a single line:

N, the length of the pseudo random number sequence to study
M, the number of study cases Randall wants to analyze
The next line will contain N numbers representing the sequence generated by Randall's PRNG. Finally, M lines will follow, each one containing 2 numbers s_m, e_m representing a subsequence of the original sequence (1-based numbering).

Output

Each test case should start with the string "Test case #" followed by the number of the test case, starting at 1. For each interval that Randall is interested in, output one single line indicating the maximum number of repetitions found inside the subsequence given by that interval.

Limits

1 ≤ T ≤ 5
1 ≤ N ≤ 106
1 ≤ M ≤ 104
1 ≤ s_m ≤ e_m ≤ N
All numbers will fit into a 32-bit signed integer.
Note: In the submit phase, the size of the input provided can be larger than 10MB. Keep this in mind when submitting.

Sample input

2
12 5
1 1 2 4 7 7 11 11 11 15 17 17
1 5
7 9
6 8
9 11
1 12
5 2
7 7 7 999 999
1 3
4 5
Sample output

Test case #1
2
3
2
1
3
Test case #2
3
2

Challenge 14 - Ovine Cryptography

After about one year of using their own programming language (Bee™) to create award-winning, bug-free software with lots of success, the sheep have decided they also need an ovine cryptographic system to communicate among themselves without nosy humans and cows snooping around. Here are some examples of hex-encoded ciphertexts encrypted using the new system designed by them:

5cb4290b0a901940ac5392061f0714b9109ae565951780dc81171f50fbd919aba08c1d9dce850618bd46d9237a578eae5b9f71f8b2312719a0bf05800e808c9007e24c1bef35fb8aaa07681557842453bb3a81c30d28ecb5d295bc24739b9eb6405d83d4ab05cd82b3b238720a569bb1d526f4132271188578862008c3afae028c793be44e26ff46397a9b62bde49a2df643e6ed755b8c6e48c785d008c9855f2c5d5dea2bb184fa1c7a070d2c39f596190d5fd10021c337a32eb8480e0c7bf0
5cfa390116d21e14b25c9b1e465f5bf8129ae27e94088b9bc80e1d1fe4c21ca2bb9644dcc9990618a64edc66655d82f9479d7ba0f7586e1de1b718ce139bc9df44de4d17ea70b290e70b27114697311aac2cccd10a28f7a9db9abc3e7480cbb55140c193f544f6d6bebe23391f0480a99b34bb156d2111837e8f6547dae7a84ccf6c3da1002bec42392e9a27bfe7d722ea11a5f568508a7911de88db4ac9a41e2d5913f26ea39ffa047b18066b25b5
54b42b0517c34d17b44098525e1114ec05d9e27e910dc59f8714064de8ce1db7bd910bd394cd3d57bf40c2237e40d8b6589b7fa7b211694ea0bf51c5029bde9409ef4907b937b48ca34a621f42883856aa63ced14535f1a1d9ddff25729bccb35a519dc7ec4aea82a3aa3975091389bbc872b500227f54a52e82730cc8ebe70d8c6a3af3026eee486b698762a6ed9a22ea07a5f56941903c5ccfcc9e4081a95f285d5afa2be285b55e34
38b4041744c30505a957dc13510a5be91e90e378d0158adc9f121b5ce18d01a8bcd813d2cf811057bf48c26b375ac1f9509f7bb4b2157e4ea0a505c5149bc59e0ab50553b904b4c3b302624740903a53a036d2970c34e0a9d198f23e3c80d8f24d5c8893e14ae382beb376211613ccbed235bc1360251d816bcd204a8ddbaf098c693ce64e2af3436b608736baebd427af0aeba2745d9d3c5fc387d647c4b81636591dbe26e5bfb21167511f6d25bbc218065fdf0c73cb28b72fec4c050166ba38bc97fb30d1b49d33898b30db89d50248ed99da05f6e4afe6f02a7c5dcb
59f5291d44f0010fa8419502055336eb5fd9da639f1291999a565257e6da58b0a68d08d99a941b02e852c4736741dcad148c3ab4fb1e6251e19314d20e86c9d133e54a0ded35a9d9e73d620b4fc96873ef30d4c71535f0a59594e86a788aceb757509e93ea4ba4d5bfb271265e0185b6de72bd136d26159f22c36147c1e6b318c06873e60b20ee4b2e2e9830b7f1c935fd06a5e0655b9d7d45c2c0ca5b8cec1a375e5ce92bb283b31c76510b7e39e8c5190d189c1821c032b125ec561f106abb29f296a465c2bd9c2bdb863ccbdaa61e45fad5d70ff1a8c9
5ce06a1744d64d06ae5c920b1f0713f01f9ead6d920e9088c8161d50e2c416a0e99e0bcf9a991c1ea646c22d3767c8f94d826fe3fa0d691ae1b71ed25a8e8c9f01ef4112fc70b28de70b270f429c3b4eae20ca971c35f6e0d192f26d68cfd8bb5750cddaf10ba4ebb1fd2f3a0b5688bfd575a0472a3802892e822003ccfda94cdb6536f5062be80732619d62b7f4df32af10e0e72041907911c485db5785a95f344e13f064b1cbb30433031d6225bbdf1e17109c006ed767b634a9050d0b7dad29f297be7dc6f1893d8ec039dac8e84a4cf894dc08eeb0c7fdf422395d91e0aebcb4
46fb200144df180dba5c8f52481c0ef515d9e963d0008b859c121b51ee8d0ca8e98b01d89a841257a1559174765d8ea95b9e69aaf014624eb5be51c415cfc5854aaa6c18b929b496e71a721303846856ae31c6d24529f4a9c19ef46a75819ea156598893e644f2c7f7ae39381b0184b5c937f8473a3800842e822014c4e8a94cc36373e81a6ee94632678625f2a5ff2eeb4eeae42d4190791cfd8fcc5f8dec2c2c5547fd63ebcb8a3c56303b4976dff9502d30e85955ed128114eb094b1667bb7da282be7ed7f1873d8e8c31d18ef24a48e990db46f5a591ecbc33704380a1b9b8babcdb4fe3
41fc281601970413fb53dc004a1e14ec03d9ea63990f82dc89081d4ae7c958b3a199109df3cd1c16be449165785bc0bd14aa75a7bc584e4eb5b918ce11cfd8990df90517ea70ae8dab036c024f9c6858aa20c0c2163fa3899595fd3c79cfdbbc56418adba541edc4b1b43520120295f0dd3bba03243f13cc639a200cc8f6b4408c6c3de54e3af242396bc82ba1a2df2dff0af7eb6354943c54dc89da5687af1a7b485bff7fe59fb2156a510d743fe8c25e
5cfa6d0205d4194cfb4694171f1e1eeb14d9ec6f84418a9ac815025ae7c416a0e98c0cd89a8f1b0fe856d86f7b0ecabc408868aefb16624eb5b91480099bcd8501aa4a18b924b386e70966130fc52956bb2bcec20232a3a9dbdde822759c9eb158478893f14de1d0b2fd21300c13cca4d320b1026d3511986b916d0ec3eeb3098c7e27e01a2be9073f668d62b1e3ce60ec0cf0ee64159a7911c38e84139da41a285913fc6eac85bd50521d017a33b79634061ed85521c329a67c8e49040d6ba77d9496a579cca4837c
46f724010ac30413af41dc1a5e051eb91298e16f850d84888d1e524be1cc0ce7bd90019dd9851519ab44c22378488eaa5b807fb7fa116909e1a21e800a8ed8940afe4907b931b990b218634742863c4fae2fcdce453ffba9c689f5247bcfdfa05c1480dae949edcdb9ae7621115683bede7cf425382554816f846904c4eea91f8c6532f70b6ef946276d9d2eb3f6df24af17ede3741595755dc689d15dc4b81076535dfb2ba683bb1e70141b2c35e9d900430acc596fcb29a77cb84c06077cfe32a797f77fc5f1843795ce
41fc284417c30212a2128f1d1f151aeb4bd9c462d0158d99c8181758e0c316aea79f44c9d2885422a648c766655dcbf9438c69e3f10a620fb5b4158e5abbc49817aa4d1fea70b682a30f27060389274eef2cc797153fecb0d998bc3c799dc7f2585a8ac1fc05e5ccb3fd34301b18cca7d236b10b3471068969827203c8ebe70ddf2d32a10c2ffe0726619e27fc
54b42e0b09da020efb5f95014b1210fc518de56d84419599870a1e5aa9c019acacd813d5df835403ba58d86d700edab614897fb0fb1f694eb2be1cc50e87c59f03aa4611f420b786b30f6b1e03832755a333d3d80a3ca3a9c6dde8253c9ad0b65c4688c0f14ce9c3a3b876211613ccb9d535b109383800952e8c6647cee0aa1cc06827e44e28f548277dc6
58ed6d000bd4190fa9128f1346005bed1998f92cb9418d9d9e1f525ea9c019abaf9716d0df895407bd43dd6a7403caac40943aa4fe19690ae1b01fc45a8e8c9f05fe500cf83cfb87a20c6e044a802659b663c8d94537ecb2d491bc2c758dccb7195583d7a551ecc3a3fd1f751f1bcca4d337a6022b3e06892e867804d8fca2088c6b21ee036ee9463d678625f2f7d429f906f7f16546d6
Despite being the most intelligent species on Earth, they are still beginners in the world of Cryptography, so their first attempt may not exactly be the most secure. You know, sheep are really into ecology, recycling and reusing stuff and well... you can't reuse certain things, can you?

Input

A hex-encoded ciphertext produced by the new ovine cipher.
Output

The plain text obtained by decrypting the input.

